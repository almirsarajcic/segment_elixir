searchNodes=[{"ref":"Segment.html","title":"Segment","type":"module","doc":"Provides the API for sending data to Segment."},{"ref":"Segment.html#alias_user/1","title":"Segment.alias_user/1","type":"function","doc":"See Segment.Server.alias_user/1."},{"ref":"Segment.html#group/1","title":"Segment.group/1","type":"function","doc":"See Segment.Server.group/1."},{"ref":"Segment.html#identify/1","title":"Segment.identify/1","type":"function","doc":"See Segment.Server.identify/1."},{"ref":"Segment.html#page/1","title":"Segment.page/1","type":"function","doc":"See Segment.Server.page/1."},{"ref":"Segment.html#screen/1","title":"Segment.screen/1","type":"function","doc":"See Segment.Server.screen/1."},{"ref":"Segment.html#start/2","title":"Segment.start/2","type":"function","doc":"Called when an application is started. This function is called when an application is started using Application.start/2 (and functions on top of that, such as Application.ensure_started/2). This function should start the top-level process of the application (which should be the top supervisor of the application&#39;s supervision tree if the application follows the OTP design principles around supervision). start_type defines how the application is started: :normal - used if the startup is a normal startup or if the application is distributed and is started on the current node because of a failover from another node and the application specification key :start_phases is :undefined. {:takeover, node} - used if the application is distributed and is started on the current node because of a failover on the node node. {:failover, node} - used if the application is distributed and is started on the current node because of a failover on node node, and the application specification key :start_phases is not :undefined. start_args are the arguments passed to the application in the :mod specification key (e.g., mod: {MyApp, [:my_args]}). This function should either return {:ok, pid} or {:ok, pid, state} if startup is successful. pid should be the PID of the top supervisor. state can be an arbitrary term, and if omitted will default to []; if the application is later stopped, state is passed to the stop/1 callback (see the documentation for the c:stop/1 callback for more information). use Application provides no default implementation for the start/2 callback. Callback implementation for Application.start/2."},{"ref":"Segment.html#track/1","title":"Segment.track/1","type":"function","doc":"See Segment.Server.track/1."},{"ref":"Segment.Alias.html","title":"Segment.Alias","type":"module","doc":""},{"ref":"Segment.Analytics.html","title":"Segment.Analytics","type":"module","doc":""},{"ref":"Segment.Analytics.html#alias_user/1","title":"Segment.Analytics.alias_user/1","type":"function","doc":""},{"ref":"Segment.Analytics.html#alias_user/3","title":"Segment.Analytics.alias_user/3","type":"function","doc":""},{"ref":"Segment.Analytics.html#group/1","title":"Segment.Analytics.group/1","type":"function","doc":""},{"ref":"Segment.Analytics.html#group/4","title":"Segment.Analytics.group/4","type":"function","doc":""},{"ref":"Segment.Analytics.html#identify/1","title":"Segment.Analytics.identify/1","type":"function","doc":""},{"ref":"Segment.Analytics.html#identify/3","title":"Segment.Analytics.identify/3","type":"function","doc":""},{"ref":"Segment.Analytics.html#page/1","title":"Segment.Analytics.page/1","type":"function","doc":""},{"ref":"Segment.Analytics.html#page/4","title":"Segment.Analytics.page/4","type":"function","doc":""},{"ref":"Segment.Analytics.html#screen/1","title":"Segment.Analytics.screen/1","type":"function","doc":""},{"ref":"Segment.Analytics.html#screen/4","title":"Segment.Analytics.screen/4","type":"function","doc":""},{"ref":"Segment.Analytics.html#track/1","title":"Segment.Analytics.track/1","type":"function","doc":""},{"ref":"Segment.Analytics.html#track/4","title":"Segment.Analytics.track/4","type":"function","doc":""},{"ref":"Segment.Context.html","title":"Segment.Context","type":"module","doc":""},{"ref":"Segment.Context.html#new/0","title":"Segment.Context.new/0","type":"function","doc":""},{"ref":"Segment.Context.html#update/1","title":"Segment.Context.update/1","type":"function","doc":""},{"ref":"Segment.Group.html","title":"Segment.Group","type":"module","doc":""},{"ref":"Segment.Http.html","title":"Segment.Http","type":"module","doc":""},{"ref":"Segment.Http.html#delete/3","title":"Segment.Http.delete/3","type":"function","doc":"Issues a DELETE request to the given url. Returns {:ok, response} if the request is successful, {:error, reason} otherwise. See request/5 for more detailed information."},{"ref":"Segment.Http.html#delete!/3","title":"Segment.Http.delete!/3","type":"function","doc":"Issues a DELETE request to the given url, raising an exception in case of failure. If the request does not fail, the response is returned. See request!/5 for more detailed information."},{"ref":"Segment.Http.html#get/3","title":"Segment.Http.get/3","type":"function","doc":"Issues a GET request to the given url. Returns {:ok, response} if the request is successful, {:error, reason} otherwise. See request/5 for more detailed information."},{"ref":"Segment.Http.html#get!/3","title":"Segment.Http.get!/3","type":"function","doc":"Issues a GET request to the given url, raising an exception in case of failure. If the request does not fail, the response is returned. See request!/5 for more detailed information."},{"ref":"Segment.Http.html#head/3","title":"Segment.Http.head/3","type":"function","doc":"Issues a HEAD request to the given url. Returns {:ok, response} if the request is successful, {:error, reason} otherwise. See request/5 for more detailed information."},{"ref":"Segment.Http.html#head!/3","title":"Segment.Http.head!/3","type":"function","doc":"Issues a HEAD request to the given url, raising an exception in case of failure. If the request does not fail, the response is returned. See request!/5 for more detailed information."},{"ref":"Segment.Http.html#options/3","title":"Segment.Http.options/3","type":"function","doc":"Issues an OPTIONS request to the given url. Returns {:ok, response} if the request is successful, {:error, reason} otherwise. See request/5 for more detailed information."},{"ref":"Segment.Http.html#options!/3","title":"Segment.Http.options!/3","type":"function","doc":"Issues a OPTIONS request to the given url, raising an exception in case of failure. If the request does not fail, the response is returned. See request!/5 for more detailed information."},{"ref":"Segment.Http.html#patch/4","title":"Segment.Http.patch/4","type":"function","doc":"Issues a PATCH request to the given url. Returns {:ok, response} if the request is successful, {:error, reason} otherwise. See request/5 for more detailed information."},{"ref":"Segment.Http.html#patch!/4","title":"Segment.Http.patch!/4","type":"function","doc":"Issues a PATCH request to the given url, raising an exception in case of failure. If the request does not fail, the response is returned. See request!/5 for more detailed information."},{"ref":"Segment.Http.html#post/4","title":"Segment.Http.post/4","type":"function","doc":"Issues a POST request to the given url. Returns {:ok, response} if the request is successful, {:error, reason} otherwise. See request/5 for more detailed information."},{"ref":"Segment.Http.html#post!/4","title":"Segment.Http.post!/4","type":"function","doc":"Issues a POST request to the given url, raising an exception in case of failure. If the request does not fail, the response is returned. See request!/5 for more detailed information."},{"ref":"Segment.Http.html#process_headers/1","title":"Segment.Http.process_headers/1","type":"function","doc":"Callback implementation for HTTPoison.Base.process_headers/1."},{"ref":"Segment.Http.html#process_request_body/1","title":"Segment.Http.process_request_body/1","type":"function","doc":"Callback implementation for HTTPoison.Base.process_request_body/1."},{"ref":"Segment.Http.html#process_request_headers/1","title":"Segment.Http.process_request_headers/1","type":"function","doc":"Callback implementation for HTTPoison.Base.process_request_headers/1."},{"ref":"Segment.Http.html#process_request_options/1","title":"Segment.Http.process_request_options/1","type":"function","doc":"Callback implementation for HTTPoison.Base.process_request_options/1."},{"ref":"Segment.Http.html#process_request_params/1","title":"Segment.Http.process_request_params/1","type":"function","doc":"Callback implementation for HTTPoison.Base.process_request_params/1."},{"ref":"Segment.Http.html#process_request_url/1","title":"Segment.Http.process_request_url/1","type":"function","doc":"Callback implementation for HTTPoison.Base.process_request_url/1."},{"ref":"Segment.Http.html#process_response/1","title":"Segment.Http.process_response/1","type":"function","doc":"Callback implementation for HTTPoison.Base.process_response/1."},{"ref":"Segment.Http.html#process_response_body/1","title":"Segment.Http.process_response_body/1","type":"function","doc":"Callback implementation for HTTPoison.Base.process_response_body/1."},{"ref":"Segment.Http.html#process_response_chunk/1","title":"Segment.Http.process_response_chunk/1","type":"function","doc":"Callback implementation for HTTPoison.Base.process_response_chunk/1."},{"ref":"Segment.Http.html#process_response_headers/1","title":"Segment.Http.process_response_headers/1","type":"function","doc":"Callback implementation for HTTPoison.Base.process_response_headers/1."},{"ref":"Segment.Http.html#process_response_status_code/1","title":"Segment.Http.process_response_status_code/1","type":"function","doc":"Callback implementation for HTTPoison.Base.process_response_status_code/1."},{"ref":"Segment.Http.html#process_status_code/1","title":"Segment.Http.process_status_code/1","type":"function","doc":"Callback implementation for HTTPoison.Base.process_status_code/1."},{"ref":"Segment.Http.html#process_url/1","title":"Segment.Http.process_url/1","type":"function","doc":"Callback implementation for HTTPoison.Base.process_url/1."},{"ref":"Segment.Http.html#put/4","title":"Segment.Http.put/4","type":"function","doc":"Issues a PUT request to the given url. Returns {:ok, response} if the request is successful, {:error, reason} otherwise. See request/5 for more detailed information."},{"ref":"Segment.Http.html#put!/4","title":"Segment.Http.put!/4","type":"function","doc":"Issues a PUT request to the given url, raising an exception in case of failure. If the request does not fail, the response is returned. See request!/5 for more detailed information."},{"ref":"Segment.Http.html#request/1","title":"Segment.Http.request/1","type":"function","doc":"Issues an HTTP request using a Request struct. This function returns {:ok, response} or {:ok, async_response} if the request is successful, {:error, reason} otherwise. Examples request = %HTTPoison.Request{ method: :post, url: &quot;https://my.website.com&quot;, body: &quot;{\\&quot;foo\\&quot;: 3}&quot;, headers: [{&quot;Accept&quot;, &quot;application/json&quot;}] } request(request)"},{"ref":"Segment.Http.html#request/5","title":"Segment.Http.request/5","type":"function","doc":"Issues an HTTP request with the given method to the given url. This function is usually used indirectly by get/3, post/4, put/4, etc Args: method - HTTP method as an atom (:get, :head, :post, :put, :delete, etc.) url - target url as a binary string or char list body - request body. See more below headers - HTTP headers as an orddict (e.g., [{&quot;Accept&quot;, &quot;application/json&quot;}]) options - Keyword list of options Body: see type HTTPoison.Request Options: see type HTTPoison.Request This function returns {:ok, response} or {:ok, async_response} if the request is successful, {:error, reason} otherwise. Examples request(:post, &quot;https://my.website.com&quot;, &quot;{\\&quot;foo\\&quot;: 3}&quot;, [{&quot;Accept&quot;, &quot;application/json&quot;}])"},{"ref":"Segment.Http.html#request!/5","title":"Segment.Http.request!/5","type":"function","doc":"Issues an HTTP request with the given method to the given url, raising an exception in case of failure. request!/5 works exactly like request/5 but it returns just the response in case of a successful request, raising an exception in case the request fails."},{"ref":"Segment.Http.html#start/0","title":"Segment.Http.start/0","type":"function","doc":"Starts HTTPoison and its dependencies."},{"ref":"Segment.Http.html#stream_next/1","title":"Segment.Http.stream_next/1","type":"function","doc":"Requests the next message to be streamed for a given HTTPoison.AsyncResponse. See request!/5 for more detailed information."},{"ref":"Segment.Http.html#t:body/0","title":"Segment.Http.body/0","type":"type","doc":""},{"ref":"Segment.Http.html#t:headers/0","title":"Segment.Http.headers/0","type":"type","doc":""},{"ref":"Segment.Http.html#t:options/0","title":"Segment.Http.options/0","type":"type","doc":""},{"ref":"Segment.Http.html#t:params/0","title":"Segment.Http.params/0","type":"type","doc":""},{"ref":"Segment.Http.html#t:request/0","title":"Segment.Http.request/0","type":"type","doc":""},{"ref":"Segment.Http.html#t:url/0","title":"Segment.Http.url/0","type":"type","doc":""},{"ref":"Segment.Identify.html","title":"Segment.Identify","type":"module","doc":""},{"ref":"Segment.Page.html","title":"Segment.Page","type":"module","doc":""},{"ref":"Segment.Sandbox.html","title":"Segment.Sandbox","type":"module","doc":"Provides an api that can be used in tests to ensure data is correctly sent to segment.io."},{"ref":"Segment.Sandbox.html#alias_user/1","title":"Segment.Sandbox.alias_user/1","type":"function","doc":""},{"ref":"Segment.Sandbox.html#alias_user/3","title":"Segment.Sandbox.alias_user/3","type":"function","doc":""},{"ref":"Segment.Sandbox.html#child_spec/1","title":"Segment.Sandbox.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Segment.Sandbox.html#get_alias/0","title":"Segment.Sandbox.get_alias/0","type":"function","doc":""},{"ref":"Segment.Sandbox.html#get_group/0","title":"Segment.Sandbox.get_group/0","type":"function","doc":""},{"ref":"Segment.Sandbox.html#get_identify/0","title":"Segment.Sandbox.get_identify/0","type":"function","doc":""},{"ref":"Segment.Sandbox.html#get_page/0","title":"Segment.Sandbox.get_page/0","type":"function","doc":""},{"ref":"Segment.Sandbox.html#get_screen/0","title":"Segment.Sandbox.get_screen/0","type":"function","doc":""},{"ref":"Segment.Sandbox.html#get_track/0","title":"Segment.Sandbox.get_track/0","type":"function","doc":""},{"ref":"Segment.Sandbox.html#group/1","title":"Segment.Sandbox.group/1","type":"function","doc":""},{"ref":"Segment.Sandbox.html#group/4","title":"Segment.Sandbox.group/4","type":"function","doc":""},{"ref":"Segment.Sandbox.html#identify/1","title":"Segment.Sandbox.identify/1","type":"function","doc":""},{"ref":"Segment.Sandbox.html#identify/3","title":"Segment.Sandbox.identify/3","type":"function","doc":""},{"ref":"Segment.Sandbox.html#page/1","title":"Segment.Sandbox.page/1","type":"function","doc":""},{"ref":"Segment.Sandbox.html#page/4","title":"Segment.Sandbox.page/4","type":"function","doc":""},{"ref":"Segment.Sandbox.html#screen/1","title":"Segment.Sandbox.screen/1","type":"function","doc":""},{"ref":"Segment.Sandbox.html#screen/4","title":"Segment.Sandbox.screen/4","type":"function","doc":""},{"ref":"Segment.Sandbox.html#start_link/1","title":"Segment.Sandbox.start_link/1","type":"function","doc":""},{"ref":"Segment.Sandbox.html#track/1","title":"Segment.Sandbox.track/1","type":"function","doc":""},{"ref":"Segment.Sandbox.html#track/4","title":"Segment.Sandbox.track/4","type":"function","doc":""},{"ref":"Segment.Screen.html","title":"Segment.Screen","type":"module","doc":""},{"ref":"Segment.Server.html","title":"Segment.Server","type":"module","doc":"Provides the api for sending data to Segment.io. All functions are implemented as Genserver casts so that they are out-of-band for clients."},{"ref":"Segment.Server.html#alias_user/1","title":"Segment.Server.alias_user/1","type":"function","doc":""},{"ref":"Segment.Server.html#alias_user/3","title":"Segment.Server.alias_user/3","type":"function","doc":""},{"ref":"Segment.Server.html#child_spec/1","title":"Segment.Server.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Segment.Server.html#group/1","title":"Segment.Server.group/1","type":"function","doc":""},{"ref":"Segment.Server.html#group/4","title":"Segment.Server.group/4","type":"function","doc":""},{"ref":"Segment.Server.html#identify/1","title":"Segment.Server.identify/1","type":"function","doc":""},{"ref":"Segment.Server.html#identify/3","title":"Segment.Server.identify/3","type":"function","doc":""},{"ref":"Segment.Server.html#page/1","title":"Segment.Server.page/1","type":"function","doc":""},{"ref":"Segment.Server.html#page/4","title":"Segment.Server.page/4","type":"function","doc":""},{"ref":"Segment.Server.html#screen/1","title":"Segment.Server.screen/1","type":"function","doc":""},{"ref":"Segment.Server.html#screen/4","title":"Segment.Server.screen/4","type":"function","doc":""},{"ref":"Segment.Server.html#start_link/1","title":"Segment.Server.start_link/1","type":"function","doc":""},{"ref":"Segment.Server.html#track/1","title":"Segment.Server.track/1","type":"function","doc":""},{"ref":"Segment.Server.html#track/4","title":"Segment.Server.track/4","type":"function","doc":""},{"ref":"Segment.Track.html","title":"Segment.Track","type":"module","doc":""}]